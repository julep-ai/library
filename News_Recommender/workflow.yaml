name: recommend news articles

input_schema:
  type: object
  properties:
    user_ppid:
      type: string
            
tools:
  - name: get_user_from_ppid
    description: Get a user from the user ppid
    type: system
    system:
      resource: user
      operation: list

  - name: get_user_docs
    description: Get user docs
    type: system
    system:
      resource: user
      subresource: doc
      operation: list
            
  - name : search_agent_docs
    description: Get agent docs
    type: system
    system: 
      resource: agent
      subresource: doc
      operation: search 
            
main:
  # Get the user from the ppid using metadata_filter (returns a list)
  - tool: get_user_from_ppid
    arguments:
      limit: "1"
      sort_by: "'created_at'"
      direction: "'desc'"
      metadata_filter:
        ppid: inputs[0]['user_ppid']

  # Unwrap the list to get the user
  - evaluate:
      user: _[0]

  - tool: get_user_docs
    arguments:
      user_id: _.user.id
      limit: "1"
      sort_by: "'created_at'"
      direction: "'desc'"

  #user persona will always be available here
  - evaluate:
      user_embedding: _[0].embeddings[0]
      persona: _[0].content[0]

  #Embedding similarity it will rank the docs
  - tool: search_agent_docs
    arguments:
      vector: _.user_embedding
      text: _.persona
      confidence: "0.1"
      mmr_strength: inputs[0]['mmr_strength']
      alpha: "0.5"
      agent_id: inputs[0]['agent_id']

  - if: "len(_['docs']) > 0"
    then:
      evaluate:
        top_titles: "[doc['title'] for doc in _['docs'][:50]]"
    else:
      return:
        newsletter_title: "'No recommendations found'"
        titles: "[]"
          
  - prompt: 
      - role: user
        content: >-
          I'm going to provide you with information about one user of my website, along with a list of titles for sport news articles.
          I want you to rank the news articles according to the users' persona and give me the top 5 as valid yaml with a field called 'articles' that contains a list of the top 5 titles.
          You should diversify the articles to include different sports (don't recommend the same sport twice unless there's no other choice).
          Note: You should always favor using double quotes over single quotes in the elements of the yaml list.
          Here's the user persona:

          {{outputs[3].persona}}

          Here's the list of titles:

          {{_.top_titles}}
    unwrap: true
      
  - evaluate:
      titles: load_yaml(_[_.find("```yaml")+7:_.rfind("```")].strip())['articles']
      
  - prompt: 
      - role: user
        content: >-
          based on these 5 titles for sports news articles:
           {{_['titles']}} 
           
           And based on this users persona: 
           
           {{outputs[3]['persona']}}
           
           I want you to draft a catchy newsletter title. Provide only the title and nothing else.
    unwrap: true
    tool_choice: none

  - evaluate:
      newsletter_title: _
      titles: outputs[7].get('titles', [])